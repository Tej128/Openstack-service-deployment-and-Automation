#!/bin/bash


dev_config(){
    nodelist=$(openstack server list --column Name -f value)
    totalnodes=$(grep -c "$nodes" <<< "$nodelist")

    for ((i=0; i<totalnodes; i++))
    do
        a=$(($i+1))
        nodes_nam=${nodes}${a}
        ip_address=$(openstack server list --name $nodes_nam -c Networks -f value | grep -Po  '\d+\.\d+\.\d+\.\d+')
        echo " " >> $sshconfig
        echo "Host $nodes_nam" >> $sshconfig
        echo "   User ubuntu" >> $sshconfig
        echo "   HostName $ip_address" >> $sshconfig
        echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
        echo "   UserKnownHostsFile=~/dev/null" >> $sshconfig
        echo "   StrictHostKeyChecking no" >> $sshconfig
        echo "   PasswordAuthentication no" >> $sshconfig
        echo "   ProxyJump $bastionNSO" >> $sshconfig 
        echo "$nodes_nam" >> $hostsfile
    done
}

operation_process() {
    wantednodes=$(cat servers.conf)
    echo "$(date) we want $wantednodes number of servers in total."

    nodelist=$(openstack server list --column Name -f value)
    totalnodes=$(grep -c "$nodes" <<< "$nodelist")
    echo "$(date) there are $totalnodes nodes present"

    if ((wantednodes > totalnodes)); then
        add_nodes=$((wantednodes - totalnodes))
        echo "$(date) $add_nodes need to be added"
        echo "[webservers]" >> $hostsfile
        for ((i=0; i<add_nodes; i++)); do
            a=$(($totalnodes+1))
            nodes_name=${nodes}${a}
            server_create=$(openstack server create --image "Ubuntu 20.04 Focal Fossa 20200423" "$nodes_name" --key-name "$key_name" --flavor "1C-2GB-50GB" --network "$net_name" --security-group "$secgroupname")
            totalnodes=$(($totalnodes+1))
            echo "$(date) Waiting for the server to become active"
            sleep 10
        done
        echo "$(date) $add_nodes number of servers generated..."
        sleep 5
        dev_config

    elif ((wantednodes < totalnodes)); then
        del_nodes=$((totalnodes - wantednodes))
        echo "$(date) $del_nodes need to be removed"
        stop=0

        if ((del_nodes > stop)); then
        echo "[webservers]" >> $hostsfile
            for ((i=del_nodes; i>0; i--)); do
                server_delete=$(openstack server list --status ACTIVE -f value -c Name | grep -m1 -oP "$nametag"'_dev([1-9]+)')
                serveremove=$(openstack server delete "$server_delete" --wait)
                sleep 10
            done
            echo "$(date) $del_nodes number of servers deleted"
            sleep 5
            dev_config
        fi
    else
        echo "$(date) Required Number of servers $wanted_nodes, already present."
	echo "[webservers]" >> $hostsfile
	dev_config
    fi
}

dandt=$(date)
openrc="$1"
nametag="$2"
sshkey="$3"

echo "$(date) Initializing the operate sequence..."
source "$openrc"
net_name="${2}_network"
snet_name="${2}_subnet"
key_name="${2}_key"
routername="${2}_router"
secgroupname="${2}_securitygroup"
proxy="${2}_HAproxy"
proxy2="${2}_HAproxy2"
bastionNSO="${2}_bastion"
nodes="${2}_dev"
viprt="${2}_vip"
sshconfig="config"
knownhosts="known_hosts"
hostsfile="hosts"
f1="$(cat floating1)"

while true
do

    test -f "$sshconfig" && rm "$sshconfig"
    test -f "$knownhosts" && rm "$knownhosts"
    test -f "$hostsfile" && rm "$hostsfile"

    operation_process

    HAPfixedip=$(openstack server show $proxy -c addresses | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')
    HAPfixedip2=$(openstack server show $proxy2 -c addresses | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')

    echo "$(date) Generating config file"
    echo "Host $bastionNSO" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $f1" >> $sshconfig
    echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
    echo "   UserKnownHostsFile /dev/null" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no" >> $sshconfig

    echo " " >> $sshconfig
    echo "Host $proxy" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $HAPfixedip" >> $sshconfig
    echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no ">> $sshconfig
    echo "   ProxyJump $bastionNSO" >> $sshconfig

    echo " " >> $sshconfig
    echo "Host $proxy2" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $HAPfixedip2" >> $sshconfig
    echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no ">> $sshconfig
    echo "   ProxyJump $bastionNSO" >> $sshconfig

    echo "$(date) Generating host file"
    echo "[bastion]" >> $hostsfile
    echo "$bastionNSO" >> $hostsfile
    echo " " >> $hostsfile
    echo "[HAproxy]" >> $hostsfile
    echo "$proxy" >> $hostsfile
    echo "$proxy2" >> $hostsfile
    echo " " >> $hostsfile
    echo " " >> $hostsfile
    echo "[primary_proxy]" >> $hostsfile
    echo "$proxy" >> $hostsfile
    echo " " >> $hostsfile
    echo "[backup_proxy]" >> $hostsfile
    echo "$proxy2" >> $hostsfile
    echo " " >> $hostsfile
    echo "[all:vars]" >> $hostsfile
    echo "ansible_user=ubuntu" >> $hostsfile
    echo "ansible_ssh_common_args="-F $sshconfig"" >> $hostsfile

    server_ids=$(openstack server list -f value -c ID)
    # Check the status of each server
    for server_id in $server_ids; do
        status=$(openstack server show -f value -c status $server_id)
		    while [ "$status" != "ACTIVE" ]; do
			    sleep 10
		        status=$(openstack server show -f value -c status $server_id)
		    done
		    echo "$(date) Server $server_id is active"
    done

    sleep 5

    echo "$(date) initialising ansible-playbook"


    ansible-playbook -i hosts -user='root' --ssh-extra-args='-p 22 -o ConnectionAttempts=10 -o StrictHostKeyChecking=no' operate_configure.yaml

    echo "Entering into sleep mode"

    sleep 30
done
